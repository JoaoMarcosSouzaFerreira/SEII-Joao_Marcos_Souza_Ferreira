import csv


class Item:

    pay_rate = 0.8 # The ray ate after 20% discount
    all = []
    def __init__(self, name: str, price: float, quantity):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater or equal than zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assing to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        # Actions to execute
        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity
    
    def apply_discount(self):
        self.price = self.price * Item.pay_rate

    @classmethod
    def instantiate_from_csv(cls):
        with open('itens.csv', 'r') as f:
            reader = csv.DictReader(f)
            items = list(reader)
        
        for item in items:
            Item(
                name = item.get('name'),
                price = float(item.get('price')),
                quantity= int(item.get('quantity')),
            )

    @staticmethod
    def is_integrer(num):
        # We will count out the floats that are point zer
        if isinstance(num, float):
            # Count out the floats that are point zero
            return num.is_integer()
        elif isinstance(num, int):
            return True
        else:
            return False
        
    def __repr__(self):
        return f"{self.__class__.__name__} ('{self.name}', {self.price}, {self.quantity})"


class Phone(Item):
    all = []
    def __init__(self, name: str, price: float, quantity, broken_phones):
        # Call to super fuction to have acess to all attributes/methodos
        super().__init__(
            name, price, quantity
        )

        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater or equal than zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"
        assert broken_phones >= 0, f"Broken Phones {broken_phones} is not greater or equal to zero!"
        
        # Assing to self object
        self.name = name
        self.price = price
        self.quantity = quantity
        self.broken_phones = broken_phones

        # Actions to execute
        Phone.all.append(self)

phone1 = Phone("jscPhonev10", 500, 5, 1)
print(Item.all)
print(Phone.all)


